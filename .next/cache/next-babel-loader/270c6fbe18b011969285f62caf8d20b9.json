{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport Question from '../components/Question';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OngoingPoll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OngoingPoll)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionLength: '',\n      question: []\n    });\n\n    return _this;\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var questionLength, questions, qs, q;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 2:\n              questionLength = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionLength)).fill().map(function (element, index) {\n                return poll.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n              qs = [];\n\n              for (q in questions) {\n                qs = questions[0];\n              }\n\n              console.log(qs);\n              this.setState({\n                questionLength: questionLength,\n                questions: questions\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.state.questionLength, __jsx(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Ask a question\"));\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","poll","Question","OngoingPoll","questionLength","question","methods","getQuestionLength","call","all","Array","fill","map","element","index","questions","qs","q","console","log","setState","state"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;IAEMC,W;;;;;;;;;;;;;;;;;;4DACI;AACFC,MAAAA,cAAc,EAAE,EADd;AAEFC,MAAAA,QAAQ,EAAE;AAFR,K;;;;;;;;;;;;;;+CAM2BJ,IAAI,CAACK,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,E;;;AAAvBJ,cAAAA,c;;+CAEkB,SAAQK,GAAR,CACpBC,KAAK,CAAC,UAASN,cAAT,CAAD,CAAL,CACCO,IADD,GAECC,GAFD,CAEK,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACrB,uBAAOb,IAAI,CAACK,OAAL,CAAaS,SAAb,CAAuBD,KAAvB,EAA8BN,IAA9B,EAAP;AACH,eAJD,CADoB,C;;;AAAlBO,cAAAA,S;AAQFC,cAAAA,E,GAAG,E;;AACP,mBAAQC,CAAR,IAAaF,SAAb,EAAuB;AACnBC,gBAAAA,EAAE,GAACD,SAAS,CAAC,CAAD,CAAZ;AACH;;AACDG,cAAAA,OAAO,CAACC,GAAR,CAAYH,EAAZ;AAEA,mBAAKI,QAAL,CAAc;AACVhB,gBAAAA,cAAc,EAAdA,cADU;AAEVW,gBAAAA,SAAS,EAATA;AAFU,eAAd;;;;;;;;;;;6BAUI;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKM,KAAL,CAAWjB,cADhB,EAGQ,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHR,CADJ;AAQH;;;;EA1CqBN,S;;AA6C1B,eAAeK,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button} from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport Question from '../components/Question';\n\nclass OngoingPoll extends Component{\n    state={\n        questionLength: '',\n        question: []\n    };\n\n    async componentDidMount(){\n        const questionLength = await poll.methods.getQuestionLength().call();\n        \n        const questions = await Promise.all(\n            Array(parseInt(questionLength))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n\n        let qs=[]\n        for(let q in questions){\n            qs=questions[0]\n        }\n        console.log(qs)\n        \n        this.setState({\n            questionLength,\n            questions\n        });\n\n        \n    }\n\n    \n\n    render(){\n        return(\n            <Layout>\n                {this.state.questionLength}     \n               \n                    <Button primary>Ask a question</Button>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}