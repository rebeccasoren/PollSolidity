{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button } from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    _classCallCheck(this, OngoingPoll);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OngoingPoll).apply(this, arguments));\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"renderQuestions\",\n    value: function renderQuestions() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, this.questionCount), __jsx(Link, {\n        route: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, __jsx(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Ask a question\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, poll, questionCount;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              poll = Poll(props.query.address);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 4:\n              questionCount = _context.sent;\n              return _context.abrupt(\"return\", questionCount);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Poll","OngoingPoll","questionCount","props","address","query","poll","methods","getQuestionLength","call"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;IACMC,W;;;;;;;;;;;;;sCASe,CAEhB;;;6BACO;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,aAAT,CADJ,EAEI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAFJ,CADJ;AASH;;;oCArB4BC,K;;;;;;AACnBC,cAAAA,O,GAAUD,KAAK,CAACE,KAAN,CAAYD,O;AACtBE,cAAAA,I,GAAON,IAAI,CAACG,KAAK,CAACE,KAAN,CAAYD,OAAb,C;;+CACWE,IAAI,CAACC,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,E;;;AAAtBP,cAAAA,a;+CAECA,a;;;;;;;;;;;;EANWL,S;;AAyB1B,eAAeI,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button} from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\nclass OngoingPoll extends Component{\n    static async getInitialProps(props){\n        const address = props.query.address;\n        const poll = Poll(props.query.address);\n        const questionCount = await poll.methods.getQuestionLength().call(); \n\n        return questionCount;\n    }\n\n    renderQuestions(){\n        \n    }\n    render(){\n        return(\n            <Layout>\n                <p>{this.questionCount}</p>\n                <Link route=\"\">\n                    <Button primary>Ask a question</Button>\n                </Link>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}