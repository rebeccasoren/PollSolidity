{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button } from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    _classCallCheck(this, OngoingPoll);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OngoingPoll).apply(this, arguments));\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"renderQuestions\",\n    value: function renderQuestions() {\n      var _this = this;\n\n      return this.props.questions.map(function (question, index) {\n        return __jsx(Question, {\n          key: index,\n          id: index,\n          question: question,\n          approversCount: _this.props.approversCount,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.renderQuestions(), __jsx(Link, {\n        route: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, __jsx(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Ask a question\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      var address, poll, questionCount, questions;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = props.query.address;\n              poll = Poll(address);\n              questionCount = poll.methods.questions.length.call(); //make new function to get length of question in contract\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionCount)).fill().map(function (element, index) {\n                return poll.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n              return _context.abrupt(\"return\", {\n                address: address,\n                questions: questions,\n                questionCount: questionCount\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Poll","OngoingPoll","props","questions","map","question","index","approversCount","renderQuestions","address","query","poll","questionCount","methods","length","call","all","Array","fill","element"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;IACMC,W;;;;;;;;;;;;;sCAiBe;AAAA;;AACb,aAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACjD,eAAO,MAAC,QAAD;AACP,UAAA,GAAG,EAAEA,KADE;AAEP,UAAA,EAAE,EAAEA,KAFG;AAGP,UAAA,QAAQ,EAAED,QAHH;AAIP,UAAA,cAAc,EAAE,KAAI,CAACH,KAAL,CAAWK,cAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAMH,OAPM,CAAP;AAQH;;;6BACO;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKC,eAAL,EADL,EAEI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAFJ,CADJ;AASH;;;oCApC4BN,K;;;;;;AAClBO,cAAAA,O,GAAWP,KAAK,CAACQ,K,CAAjBD,O;AACDE,cAAAA,I,GAAOX,IAAI,CAACS,OAAD,C;AACXG,cAAAA,a,GAAgBD,IAAI,CAACE,OAAL,CAAaV,SAAb,CAAuBW,MAAvB,CAA8BC,IAA9B,E,EAAsC;;;+CAEpC,SAAQC,GAAR,CACpBC,KAAK,CAAC,UAASL,aAAT,CAAD,CAAL,CACCM,IADD,GAECd,GAFD,CAEK,UAACe,OAAD,EAAUb,KAAV,EAAoB;AACrB,uBAAOK,IAAI,CAACE,OAAL,CAAaV,SAAb,CAAuBG,KAAvB,EAA8BS,IAA9B,EAAP;AACH,eAJD,CADoB,C;;;AAAlBZ,cAAAA,S;+CAQC;AAACM,gBAAAA,OAAO,EAAPA,OAAD;AAAUN,gBAAAA,SAAS,EAATA,SAAV;AAAqBS,gBAAAA,aAAa,EAAbA;AAArB,e;;;;;;;;;;;;EAdWf,S;;AAwC1B,eAAeI,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button} from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\nclass OngoingPoll extends Component{\n    static async getInitialProps(props){\n        const {address} = props.query;\n        const poll = Poll(address);\n        const questionCount = poll.methods.questions.length.call(); //make new function to get length of question in contract\n\n        const questions = await Promise.all(\n            Array(parseInt(questionCount))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n\n        return {address, questions, questionCount};\n    }\n\n    renderQuestions(){\n        return this.props.questions.map((question, index) => {\n            return <Question \n            key={index}\n            id={index}\n            question={question}\n            approversCount={this.props.approversCount}\n            />;\n        });\n    }\n    render(){\n        return(\n            <Layout>\n                {this.renderQuestions()}\n                <Link route=\"\">\n                    <Button primary>Ask a question</Button>\n                </Link>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}