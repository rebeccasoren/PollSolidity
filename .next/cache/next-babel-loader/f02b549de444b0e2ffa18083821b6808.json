{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport Question from '../components/Question';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OngoingPoll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OngoingPoll)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionLength: '',\n      questions: []\n    });\n\n    return _this;\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var questionLength, questions;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 2:\n              questionLength = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionLength)).fill().map(function (element, index) {\n                return campaign.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n              this.setState({\n                questionLength: questionLength,\n                questions: questions\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"renderQuestions\",\n    value: function renderQuestions() {\n      return this.state.questions.map(function (question, index) {\n        return __jsx(Question, {\n          key: index,\n          id: index,\n          question: question\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, this.state.questionLength, this.renderQuestions(), __jsx(Button, {\n        primary: true\n      }, \"Ask a question\"));\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":null,"metadata":{},"sourceType":"module"}