{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button, Card, Container } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport { Link } from '../routes';\nimport Answer from '../components/Answer';\n\nclass FinishedPoll extends Component {\n  static async getInitialProps() {\n    const questionLength = await poll.methods.getQuestionLength().call();\n    const questions = await _Promise.all(Array(_parseInt(questionLength)).fill().map((element, index) => {\n      return poll.methods.questions(index).call();\n    }));\n    return {\n      questions\n    };\n  }\n\n  renderQuestion() {\n    let color;\n    return this.props.questions.map((question, index) => {\n      if (question[4].localeCompare('Yay') == 0) color = 'green';else color = 'red';\n      return __jsx(Answer, {\n        id: index,\n        key: index,\n        question: question[0],\n        complete: question[1],\n        answer: question[4],\n        color: color\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Container, null, this.renderQuestion()), __jsx(Link, {\n      route: \"/ongoing/add\"\n    }, __jsx(Button, {\n      compact: true,\n      primary: true,\n      size: \"huge\",\n      style: {\n        position: 'absolute',\n        top: '5px'\n      }\n    }, \"Ask a question\")));\n  }\n\n}\n\nexport default FinishedPoll;","map":null,"metadata":{},"sourceType":"module"}