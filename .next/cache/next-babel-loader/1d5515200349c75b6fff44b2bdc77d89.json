{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button } from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\n\nclass OngoingPoll extends Component {\n  static async getInitialProps(props) {\n    const address = props.query.address;\n    const poll = Poll(props.query.address);\n    const questionCount = poll.methods.getQuestionLength().call();\n    const questions = await _Promise.all(Array(_parseInt(questionCount)).fill().map((element, index) => {\n      return poll.methods.questions(index).call();\n    }));\n    return {\n      address,\n      questions,\n      questionCount\n    };\n  }\n\n  renderQuestions() {\n    return this.props.questions.map((question, index) => {\n      return __jsx(Question, {\n        key: index,\n        id: index,\n        question: question,\n        approversCount: this.props.approversCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, this.renderQuestions(), __jsx(Link, {\n      route: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, __jsx(Button, {\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Ask a question\")));\n  }\n\n}\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Poll","OngoingPoll","getInitialProps","props","address","query","poll","questionCount","methods","getQuestionLength","call","questions","all","Array","fill","map","element","index","renderQuestions","question","approversCount","render"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,QAAqB,mBAArB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;AACA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAmC;AAC/B,eAAaK,eAAb,CAA6BC,KAA7B,EAAmC;AAC/B,UAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,CAAYD,OAA5B;AACA,UAAME,IAAI,GAAGN,IAAI,CAACG,KAAK,CAACE,KAAN,CAAYD,OAAb,CAAjB;AACA,UAAMG,aAAa,GAAGD,IAAI,CAACE,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,EAAtB;AAEA,UAAMC,SAAS,GAAG,MAAM,SAAQC,GAAR,CACpBC,KAAK,CAAC,UAASN,aAAT,CAAD,CAAL,CACCO,IADD,GAECC,GAFD,CAEK,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACrB,aAAOX,IAAI,CAACE,OAAL,CAAaG,SAAb,CAAuBM,KAAvB,EAA8BP,IAA9B,EAAP;AACH,KAJD,CADoB,CAAxB;AAQA,WAAO;AAACN,MAAAA,OAAD;AAAUO,MAAAA,SAAV;AAAqBJ,MAAAA;AAArB,KAAP;AACH;;AAEDW,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKf,KAAL,CAAWQ,SAAX,CAAqBI,GAArB,CAAyB,CAACI,QAAD,EAAWF,KAAX,KAAqB;AACjD,aAAO,MAAC,QAAD;AACP,QAAA,GAAG,EAAEA,KADE;AAEP,QAAA,EAAE,EAAEA,KAFG;AAGP,QAAA,QAAQ,EAAEE,QAHH;AAIP,QAAA,cAAc,EAAE,KAAKhB,KAAL,CAAWiB,cAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAMH,KAPM,CAAP;AAQH;;AACDC,EAAAA,MAAM,GAAE;AACJ,WACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKH,eAAL,EADL,EAEI,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAFJ,CADJ;AASH;;AArC8B;;AAwCnC,eAAejB,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button} from 'semantic-ui-react';\nimport Poll from '../ethereum/poll';\nclass OngoingPoll extends Component{\n    static async getInitialProps(props){\n        const address = props.query.address;\n        const poll = Poll(props.query.address);\n        const questionCount = poll.methods.getQuestionLength().call(); \n\n        const questions = await Promise.all(\n            Array(parseInt(questionCount))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n\n        return {address, questions, questionCount};\n    }\n\n    renderQuestions(){\n        return this.props.questions.map((question, index) => {\n            return <Question \n            key={index}\n            id={index}\n            question={question}\n            approversCount={this.props.approversCount}\n            />;\n        });\n    }\n    render(){\n        return(\n            <Layout>\n                {this.renderQuestions()}\n                <Link route=\"\">\n                    <Button primary>Ask a question</Button>\n                </Link>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}