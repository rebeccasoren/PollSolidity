{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Form, Button, Message, Container } from 'semantic-ui-react';\nimport { Router } from '../../routes';\nimport web3 from '../../ethereum/web3';\nimport poll from '../../ethereum/poll';\n\nclass Add extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      message: '',\n      loading: false,\n      description: '',\n      show: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        message: '',\n        loading: true\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await poll.methods.askQuestion(this.state.description).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(`/ongoing`);\n      } catch (err) {\n        this.setState({\n          message: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const manager = await poll.methods.manager().call();\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0] == manager) {\n      this.setState({\n        show: true\n      });\n    }\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Container, null, __jsx(\"center\", null, this.state.show ? null : __jsx(Message, {\n      warning: true,\n      header: \"Sorry\",\n      content: \"Currently only manager can ask questions\"\n    }), __jsx(Form, {\n      inverted: true,\n      onSubmit: this.onSubmit,\n      error: !!this.state.message\n    }, __jsx(Form.Input, {\n      width: 6,\n      label: \"Question\",\n      value: this.state.description,\n      onChange: event => this.setState({\n        description: event.target.value\n      })\n    }), __jsx(Message, {\n      compact: true,\n      error: true,\n      header: \"Oops\",\n      content: this.state.message\n    }), __jsx(\"br\", null), __jsx(Button, {\n      content: \"Add Question\",\n      primary: true,\n      loading: this.state.loading,\n      size: \"huge\"\n    })))));\n  }\n\n}\n\nexport default Add;","map":null,"metadata":{},"sourceType":"module"}