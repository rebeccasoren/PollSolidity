{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button, Card, Container } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    _classCallCheck(this, OngoingPoll);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(OngoingPoll).apply(this, arguments));\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      return this.props.questions.map(function (question, index) {\n        return __jsx(Question, {\n          id: index,\n          question: question[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.props.questionLength, \" Ongoing Polls\"), this.renderQuestion()), __jsx(Link, {\n        route: \"/ongoing/add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, __jsx(Button, {\n        primary: true,\n        style: {\n          marginTop: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Ask a question\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var questionLength, questions;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 2:\n              questionLength = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionLength)).fill().map(function (element, index) {\n                return poll.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n              console.log(questions);\n              return _context.abrupt(\"return\", {\n                questionLength: questionLength,\n                questions: questions\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Card","Container","poll","Link","web3","OngoingPoll","props","questions","map","question","index","questionLength","renderQuestion","marginTop","methods","getQuestionLength","call","all","Array","fill","element","console","log"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,SAAtB,QAAsC,mBAAtC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;;IAEMC,W;;;;;;;;;;;;;qCAsBc;AACZ,aAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACjD,eAAO,MAAC,QAAD;AACP,UAAA,EAAE,EAAEA,KADG;AAEP,UAAA,QAAQ,EAAED,QAAQ,CAAC,CAAD,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,OALM,CAAP;AAMH;;;6BAGO;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKH,KAAL,CAAWK,cAAf,mBADJ,EAEK,KAAKC,cAAL,EAFL,CADJ,EAKI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,CALJ,CADJ;AAYH;;;;;;;;;;+CAzCgCX,IAAI,CAACY,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,E;;;AAAvBL,cAAAA,c;;+CAEkB,SAAQM,GAAR,CACpBC,KAAK,CAAC,UAASP,cAAT,CAAD,CAAL,CACCQ,IADD,GAECX,GAFD,CAEK,UAACY,OAAD,EAAUV,KAAV,EAAoB;AACrB,uBAAOR,IAAI,CAACY,OAAL,CAAaP,SAAb,CAAuBG,KAAvB,EAA8BM,IAA9B,EAAP;AACH,eAJD,CADoB,C;;;AAAlBT,cAAAA,S;AAONc,cAAAA,OAAO,CAACC,GAAR,CAAYf,SAAZ;+CACM;AACFI,gBAAAA,cAAc,EAAdA,cADE;AAEFJ,gBAAAA,SAAS,EAATA;AAFE,e;;;;;;;;;;;;EAdYV,S;;AAgD1B,eAAeQ,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button, Card, Container} from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport {Link} from '../routes'\nimport web3 from '../ethereum/web3';\n\nclass OngoingPoll extends Component{\n    \n    \n    static async getInitialProps(){\n        const questionLength = await poll.methods.getQuestionLength().call();\n       \n        const questions = await Promise.all(\n            Array(parseInt(questionLength))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n        console.log(questions);\n        return{\n            questionLength,\n            questions\n        }\n    }\n\n    \n\n    renderQuestion(){\n        return this.props.questions.map((question, index) => {\n            return <Question \n            id={index}\n            question={question[0]}\n            />;\n        });\n    }\n    \n\n    render(){\n        return(\n            <Layout>\n                <Container>\n                    <p>{this.props.questionLength} Ongoing Polls</p>\n                    {this.renderQuestion()}       \n                </Container>\n                <Link route='/ongoing/add'>\n                <Button primary style={{marginTop: '10px'}}>Ask a question</Button>\n                </Link>\n                   \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}