{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Button, Card, Container, Message } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport web3 from '../ethereum/web3';\nimport { Router } from 'next/router';\n\nclass Question extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false,\n      errorMessage: '',\n      show: false\n    });\n\n    _defineProperty(this, \"voteYes\", async () => {\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        const accounts = await web3.eth.getAccounts();\n        await poll.methods.voteYay(this.props.id).send({\n          from: accounts[0]\n        });\n        Router.pushRoute('/ongoing');\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n        this.setState({\n          loading: false\n        });\n      }\n\n      ;\n    });\n\n    _defineProperty(this, \"voteNo\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      await poll.methods.voteNay(this.props.id).send({\n        from: accounts[0]\n      });\n    });\n\n    _defineProperty(this, \"declare\", async () => {\n      const accounts = await web3.eth.getAccounts();\n      await poll.methods.updateAnswer(this.props.id).send({\n        from: accounts[0]\n      });\n      document.location.reload();\n    });\n  }\n\n  async componentDidMount() {\n    const manager = await poll.methods.manager().call();\n    const accounts = await web3.eth.getAccounts();\n\n    if (accounts[0] == manager) {\n      this.setState({\n        show: true\n      });\n    }\n  }\n\n  render() {\n    const er = this.state.errorMessage;\n    if (er) alert(er);\n    const {\n      question,\n      complete\n    } = this.props;\n    return __jsx(Card.Group, {\n      centered: true\n    }, complete ? null : __jsx(Card, null, __jsx(Card.Content, null, __jsx(Card.Header, null, question), __jsx(Card.Content, {\n      extra: true\n    }, __jsx(\"div\", null, __jsx(Button, {\n      basic: true,\n      color: \"green\",\n      onClick: this.voteYes\n    }, \"Yay\"), __jsx(Button, {\n      basic: true,\n      color: \"red\",\n      onClick: this.voteNo\n    }, \"Nay\"), this.state.show ? __jsx(Button, {\n      fluid: true,\n      onClick: this.declare\n    }, \"Declare Result\") : null)))));\n  }\n\n}\n\nexport default Question;","map":null,"metadata":{},"sourceType":"module"}