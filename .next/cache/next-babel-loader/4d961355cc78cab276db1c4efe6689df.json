{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button, Card } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport Question from '../components/Question';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OngoingPoll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OngoingPoll)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      questionLength: '0',\n      questions: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_isMounted\", true);\n\n    return _this;\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var questionLength, questions;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 2:\n              questionLength = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionLength)).fill().map(function (element, index) {\n                return poll.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n\n              if (this._isMounted) {\n                this.setState({\n                  questionLength: questionLength,\n                  questions: questions\n                });\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      return __jsx(Card.Group, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, this.state.questions.map(function (question) {\n        return __jsx(Card, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, __jsx(Card.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, question[0]));\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, this.state.questionLength, this.renderQuestion(), __jsx(Button, {\n        primary: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Ask a question\"));\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Card","poll","Question","OngoingPoll","questionLength","questions","methods","getQuestionLength","call","all","Array","fill","map","element","index","_isMounted","setState","state","question","renderQuestion"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,QAA2B,mBAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;;IAEMC,W;;;;;;;;;;;;;;;;;;4DACI;AACFC,MAAAA,cAAc,EAAE,GADd;AAEFC,MAAAA,SAAS,EAAE;AAFT,K;;iEAKM,I;;;;;;;;;;;;;;+CAEqBJ,IAAI,CAACK,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,E;;;AAAvBJ,cAAAA,c;;+CAEkB,SAAQK,GAAR,CACpBC,KAAK,CAAC,UAASN,cAAT,CAAD,CAAL,CACCO,IADD,GAECC,GAFD,CAEK,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACrB,uBAAOb,IAAI,CAACK,OAAL,CAAaD,SAAb,CAAuBS,KAAvB,EAA8BN,IAA9B,EAAP;AACH,eAJD,CADoB,C;;;AAAlBH,cAAAA,S;;AAON,kBAAG,KAAKU,UAAR,EAAmB;AACf,qBAAKC,QAAL,CAAc;AACVZ,kBAAAA,cAAc,EAAdA,cADU;AAEVC,kBAAAA,SAAS,EAATA;AAFU,iBAAd;AAIH;;;;;;;;;;;2CAGiB;AAClB,WAAKU,UAAL,GAAkB,KAAlB;AACH;;;qCACe;AACZ,aAAO,MAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF,KAAKE,KAAL,CAAWZ,SAAX,CAAqBO,GAArB,CAAyB,UAAAM,QAAQ;AAAA,eAC9B,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,MAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACCA,QAAQ,CAAC,CAAD,CADT,CADJ,CAD8B;AAAA,OAAjC,CADE,CAAP;AAQH;;;6BAGO;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKD,KAAL,CAAWb,cADhB,EAEK,KAAKe,cAAL,EAFL,EAGQ,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHR,CADJ;AAQH;;;;EAjDqBtB,S;;AAoD1B,eAAeM,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button, Card} from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport Question from '../components/Question';\n\nclass OngoingPoll extends Component{\n    state={\n        questionLength: '0',\n        questions: []\n        \n    };\n    _isMounted= true;\n    async componentDidMount(){\n        const questionLength = await poll.methods.getQuestionLength().call();\n        \n        const questions = await Promise.all(\n            Array(parseInt(questionLength))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n        if(this._isMounted){\n            this.setState({\n                questionLength,\n                questions\n            });\n        }\n        \n    }\n    componentWillUnmount(){\n        this._isMounted = false;\n    }\n    renderQuestion(){\n        return <Card.Group>\n            {this.state.questions.map(question=>\n                <Card>\n                    <Card.Header>\n                    {question[0]}\n                    </Card.Header>\n                </Card>)}\n        </Card.Group> ;\n    }\n    \n\n    render(){\n        return(\n            <Layout>\n                {this.state.questionLength}     \n                {this.renderQuestion()}           \n                    <Button primary>Ask a question</Button>\n                \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}