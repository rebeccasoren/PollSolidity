{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/nixi/EthWorkspace/poll/pages/ongoing.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Layout from '../components/Layout';\nimport { Button, Card, Container } from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport { Link } from '../routes';\nimport web3 from '../ethereum/web3';\n\nvar OngoingPoll =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OngoingPoll, _Component);\n\n  function OngoingPoll() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OngoingPoll);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OngoingPoll)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"voteYay\", function () {\n      console.log(\"votes\");\n    });\n\n    return _this;\n  }\n\n  _createClass(OngoingPoll, [{\n    key: \"renderQuestion\",\n    value: function renderQuestion() {}\n  }, {\n    key: \"voteNay\",\n    value: function voteNay() {}\n  }, {\n    key: \"renderQuestion\",\n    value: function renderQuestion() {\n      var _this2 = this;\n\n      var items = this.state.questions.map(function (index, question) {\n        return {\n          id: {\n            index: index\n          },\n          header: question[0],\n          description: __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }, __jsx(Button, {\n            onClick: _this2.voteYay,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43\n            },\n            __self: this\n          }, \"Yay\"), __jsx(Button, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, \"Nay\"))\n        };\n      });\n      return __jsx(Card.Group, {\n        centered: true,\n        itemsPerRow: 2,\n        items: items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, this.state.questionLength, \" Ongoing Polls\"), this.renderQuestion()), __jsx(Link, {\n        route: \"/ongoing/add\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(Button, {\n        primary: true,\n        style: {\n          marginTop: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Ask a question\")));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var questionLength, questions;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(poll.methods.getQuestionLength().call());\n\n            case 2:\n              questionLength = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_Promise.all(Array(_parseInt(questionLength)).fill().map(function (element, index) {\n                return poll.methods.questions(index).call();\n              })));\n\n            case 5:\n              questions = _context.sent;\n              console.log(questions);\n              return _context.abrupt(\"return\", {\n                questionLength: questionLength\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return OngoingPoll;\n}(Component);\n\nexport default OngoingPoll;","map":{"version":3,"sources":["/home/nixi/EthWorkspace/poll/pages/ongoing.js"],"names":["React","Component","Layout","Button","Card","Container","poll","Link","web3","OngoingPoll","console","log","items","state","questions","map","index","question","id","header","description","voteYay","questionLength","renderQuestion","marginTop","methods","getQuestionLength","call","all","Array","fill","element"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,SAAtB,QAAsC,mBAAtC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AAEA,OAAOC,IAAP,MAAiB,kBAAjB;;IACMC,W;;;;;;;;;;;;;;;;;;8DAqBQ,YAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,K;;;;;;;qCAPe,CAEf;;;8BAOQ,CAER;;;qCACe;AAAA;;AACZ,UAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAACC,KAAD,EAAOC,QAAP,EAAmB;AAClD,eAAM;AACFC,UAAAA,EAAE,EAAE;AAACF,YAAAA,KAAK,EAALA;AAAD,WADF;AAEFG,UAAAA,MAAM,EAAEF,QAAQ,CAAC,CAAD,CAFd;AAGFG,UAAAA,WAAW,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,MAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,MAAI,CAACC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ;AAJF,SAAN;AAUH,OAXS,CAAd;AAaA,aAAO,MAAC,IAAD,CAAM,KAAN;AAAY,QAAA,QAAQ,MAApB;AAAqB,QAAA,WAAW,EAAE,CAAlC;AAAqC,QAAA,KAAK,EAAGT,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;6BAGO;AACJ,aACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKC,KAAL,CAAWS,cAAf,mBADJ,EAEK,KAAKC,cAAL,EAFL,CADJ,EAKI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC,cAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,KAAK,EAAE;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADA,CALJ,CADJ;AAYH;;;;;;;;;;+CAzDgClB,IAAI,CAACmB,OAAL,CAAaC,iBAAb,GAAiCC,IAAjC,E;;;AAAvBL,cAAAA,c;;+CAEkB,SAAQM,GAAR,CACpBC,KAAK,CAAC,UAASP,cAAT,CAAD,CAAL,CACCQ,IADD,GAECf,GAFD,CAEK,UAACgB,OAAD,EAAUf,KAAV,EAAoB;AACrB,uBAAOV,IAAI,CAACmB,OAAL,CAAaX,SAAb,CAAuBE,KAAvB,EAA8BW,IAA9B,EAAP;AACH,eAJD,CADoB,C;;;AAAlBb,cAAAA,S;AAONJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ;+CACM;AACFQ,gBAAAA,cAAc,EAAdA;AADE,e;;;;;;;;;;;;EAZYrB,S;;AA8D1B,eAAeQ,WAAf","sourcesContent":["import React, {Component} from 'react';\nimport Layout from '../components/Layout';\nimport {Button, Card, Container} from 'semantic-ui-react';\nimport poll from '../ethereum/poll';\nimport {Link} from '../routes'\n\nimport web3 from '../ethereum/web3';\nclass OngoingPoll extends Component{\n    static async getInitialProps(){\n        const questionLength = await poll.methods.getQuestionLength().call();\n       \n        const questions = await Promise.all(\n            Array(parseInt(questionLength))\n            .fill()\n            .map((element, index) => {\n                return poll.methods.questions(index).call()\n            })\n        );\n        console.log(questions);\n        return{\n            questionLength\n        }\n    }\n    renderQuestion(){\n        \n    }\n    \n    \n    voteYay = () => {\n        console.log(\"votes\");\n    }\n    \n    voteNay(){\n\n    }\n    renderQuestion(){\n        const items = this.state.questions.map((index,question) =>{\n                return{\n                    id: {index},\n                    header: question[0],\n                    description: (\n                        <div>\n                            <Button onClick={this.voteYay}>Yay</Button>\n                            <Button>Nay</Button>\n                        </div>\n                    )\n                };\n            });\n\n        return <Card.Group centered itemsPerRow={2} items ={items}/> \n    }\n    \n\n    render(){\n        return(\n            <Layout>\n                <Container>\n                    <p>{this.state.questionLength} Ongoing Polls</p>\n                    {this.renderQuestion()}       \n                </Container>\n                <Link route='/ongoing/add'>\n                <Button primary style={{marginTop: '10px'}}>Ask a question</Button>\n                </Link>\n                   \n            </Layout>\n        );\n    }\n}\n\nexport default OngoingPoll;"]},"metadata":{},"sourceType":"module"}